# .github/workflows/app.yaml
name: build_api
on:
  push:
    branches: [ manifest_refactor ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      # Setup Python (faster than using Python container)
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root
      
      - name: Install library
        run: |
          poetry install --no-interaction

      - name: Build API
        run: |
            python src/fibsem_metadata/generate_endpoints.py .

      - name: Push API
        uses: EndBug/add-and-commit@v7
        with:
          # The arguments for the `git add` command (see the paragraph below for more info)
          # Default: '.'
          add: '-f api/'

          # The message for the commit.
          # Default: 'Commit from GitHub Actions (name of the workflow)'
          message: 'Build API'

          # The way the action should handle pathspec errors from the add and remove commands. Three options are available:
          # - ignore -> errors will be logged but the step won't fail
          # - exitImmediately -> the action will stop right away, and the step will fail
          # - exitAtEnd -> the action will go on, every pathspec error will be logged at the end, the step will fail.
          # Default: ignore
          pathspec_error_handling: exitImmediately

          # Arguments for the git pull command. Use NO-PULL to avoid the action pulling at all.
          # Default: '--no-rebase'
          pull: 'NO-PULL'

          # Whether to push the commit and, if any, its tags to the repo. It can also be used to set the git push arguments (see the paragraph below for more info)
          # Default: true
          push: true

          # The arguments for the `git rm` command (see the paragraph below for more info)
          # Default: ''
          remove: ''

          # Arguments for the git tag command (the tag name always needs to be the first word not preceded by an hyphen)
          # Default: ''
          tag: ''
